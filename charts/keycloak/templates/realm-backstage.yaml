apiVersion: k8s.keycloak.org/v2alpha1
kind: KeycloakRealmImport
metadata:
  name: backstage
spec:
  keycloakCRName: keycloak
  realm:
    id: backstage
    realm: backstage
    displayName: backstage
    notBefore: 1698269597
    revokeRefreshToken: false
    refreshTokenMaxReuse: 0
    accessTokenLifespan: 300
    accessTokenLifespanForImplicitFlow: 900
    ssoSessionIdleTimeout: 1800
    ssoSessionMaxLifespan: 36000
    offlineSessionIdleTimeout: 2592000
    clientSessionIdleTimeout: 0
    clientSessionMaxLifespan: 0
    clientOfflineSessionIdleTimeout: 0
    clientOfflineSessionMaxLifespan: 0
    accessCodeLifespan: 60
    accessCodeLifespanUserAction: 300
    accessCodeLifespanLogin: 1800
    actionTokenGeneratedByAdminLifespan: 43200
    actionTokenGeneratedByUserLifespan: 300
    oauth2DeviceCodeLifespan: 600
    oauth2DevicePollingInterval: 5
    enabled: true
    sslRequired: external
    registrationAllowed: false
    registrationEmailAsUsername: false
    rememberMe: false
    verifyEmail: false
    loginWithEmailAllowed: true
    duplicateEmailsAllowed: false
    resetPasswordAllowed: false
    editUsernameAllowed: false
    bruteForceProtected: false
    permanentLockout: false
    maxFailureWaitSeconds: 900
    minimumQuickLoginWaitSeconds: 60
    waitIncrementSeconds: 60
    quickLoginCheckMilliSeconds: 1000
    maxDeltaTimeSeconds: 43200
    failureFactor: 30
    roles:
      realm: []
      client:
        backstage: []
    groups:
    - name: developers
      path: "/developers"
      attributes: {}
      realmRoles: []
      clientRoles: {}
      subGroups: []
    - name: operators
      path: "/operators"
      attributes: {}
      realmRoles: []
      clientRoles: {}
      subGroups: []
    - name: backstage-admins
      path: "/backstage-admins"
      attributes: {}
      realmRoles: []
      clientRoles: {}
      subGroups: []
    defaultRoles: []
    requiredCredentials:
    - password
    users:
    - username: backstage-admin
      enabled: true
      emailVerified: true
      firstName: admin
      lastName: backstage
      email: backstage-admin@redhat.com
      credentials:
      - type: password
        value: letmein
      realmRoles:
      - default-roles-backstage
      groups:
      - "/backstage-admins"
    - username: service-account-backstage
      enabled: true
      emailVerified: false
      serviceAccountClientId: backstage
      clientRoles:
        realm-management:
        - view-users
        - query-groups
        - query-users
    - username: user-dev-1
      enabled: true
      emailVerified: true
      firstName: user-dev-1
      lastName: user-dev-1
      email: user-dev-1@example.com
      credentials:
      - type: password
        value: letmein
      groups:
      - "/developers"
    - username: user-dev-2
      enabled: true
      emailVerified: true
      firstName: user-dev-2
      lastName: user-dev-2
      email: user-dev-2@example.com
      credentials:
      - type: password
        value: letmein
      groups:
      - "/developers"
    - username: user-ops-1
      enabled: true
      emailVerified: true
      firstName: user-ops-1
      lastName: user-ops-1
      email: user-ops-1@example.com
      credentials:
      - type: password
        value: letmein
      groups:
      - "/operators"
    - username: user-ops-2
      enabled: true
      emailVerified: true
      firstName: user-ops-2
      lastName: user-ops-2
      email: user-ops-2@example.com
      credentials:
      - type: password
        value: letmein
      groups:
      - "/operators"
    scopeMappings: []
    clientScopeMappings: []
    clients:
    - clientId: "{{ .Values.keycloak.backstageClient.id }}"
      enabled: true
      clientAuthenticatorType: client-secret
      secret: "{{ .Values.keycloak.backstageClient.secret }}"
      redirectUris:
      - https://backstage-backstage-developer-hub.{{ .Values.clusterRouterDomain }}/api/auth/oidc/handler/frame
      webOrigins:
      - https://backstage-backstage-developer-hub.{{ .Values.clusterRouterDomain }}
      standardFlowEnabled: true
      implicitFlowEnabled: false
      directAccessGrantsEnabled: true
      serviceAccountsEnabled: true
      publicClient: false
      protocolMappers:
      - name: Client IP Address
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientAddress
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientAddress
          jsonType.label: String
      - name: Client Host
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientHost
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientHost
          jsonType.label: String
      - name: Client ID
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientId
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientId
          jsonType.label: String
      defaultClientScopes:
      - profile
      - roles
      - email
      optionalClientScopes: []
    identityProviders: []
    keycloakVersion: 18.0.9.redhat-00001
