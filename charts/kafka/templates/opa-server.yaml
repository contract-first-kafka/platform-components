---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opa
  labels:
    app: opa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opa
  template:
    metadata:
      labels:
        app: opa
      name: opa
    spec:
      containers:
        - name: opa
          image: openpolicyagent/opa:latest
          ports:
            - name: http
              containerPort: 8181
          args:
            - "run"
            - "--ignore=.*"
            - "--log-level=debug"
            - "--server"
            - "--set=decision_logs.console=true"
            - "/policies"
          volumeMounts:
            - readOnly: true
              mountPath: /policies
              name: opa-policies
      volumes:
        - name: opa-policies
          configMap:
            name: opa-policies
---
kind: Service
apiVersion: v1
metadata:
  name: opa
  labels:
    app: opa
spec:
  selector:
    app: opa
  ports:
    - name: http
      protocol: TCP
      port: 8181
      targetPort: 8181
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: opa-policies
data:
  kafka-auth-policy.rego: |
    package kafka

    import rego.v1

    default allow = false

    principals = {
        "platform-admin": {
            "admin": true
        },
        "mirrormaker": {
            "topicAdmin": true
        },
        "test-app-b": {
            "reads": ["test-app-a.orders", "test-app-a.favorites"]
        }
    }

    allow if {
        not deny
    }

    deny if {
        not allow_admins
        not allow_topic_admins
        not allow_resource_owner
        not allow_guest_reader
    }

    allow_admins if {
        principals[input.session.sanitizedUser].admin
    }

    allow_topic_admins if {
        input.resource.resourceType.name == "Topic"
        principals[input.session.sanitizedUser].topicAdmin
    }

    allow_resource_owner if {
        ownedResourceTypes := {"Topic", "Group"}
        ownedResourceTypes[_] == input.resource.resourceType.name
        startswith(input.resource.resourceName, input.session.sanitizedUser)
    }

    allow_guest_reader if {
        input.resource.resourceType.name == "Topic"
        input.operation.name == "Read"
        principals[input.session.sanitizedUser].reads[_] == input.resource.resourceName
    }