---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opa
  labels:
    app: opa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opa
  template:
    metadata:
      labels:
        app: opa
      name: opa
    spec:
      containers:
        - name: opa
          image: openpolicyagent/opa:latest
          ports:
            - name: http
              containerPort: 8181
          args:
            - "run"
            - "--ignore=.*"
            - "--log-level=debug"
            - "--server"
            - "--set=decision_logs.console=true"
            - "/policies"
          volumeMounts:
            - readOnly: true
              mountPath: /policies
              name: opa-policies
      volumes:
        - name: opa-policies
          configMap:
            name: opa-policies
---
kind: Service
apiVersion: v1
metadata:
  name: opa
  labels:
    app: opa
spec:
  selector:
    app: opa
  ports:
    - name: http
      protocol: TCP
      port: 8181
      targetPort: 8181
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: opa-policies
data:
  kafka-auth-policy.rego: |
    package kafka.authz

    default allow = false

    allow {
        not deny
    }

    deny {
        not allow_consumer_group
        not allow_producer_group
        not allow_admin_group
    }

    allow_consumer_group {
        is_consumer_operation
        is_consumer_group
    }

    allow_producer_group {
        is_producer_operation
        is_producer_group
    }

    allow_admin_group {
        is_admin_operation
        is_admin_group
    }

    ###############################################################################
    # Groups and their helper rules
    ###############################################################################

    consumer_group = ["tom", "tyrone", "matt", "pepe", "douglas"]
    producer_group = ["jack", "conor", "keinan", "john"]
    admin_group = ["dean", "christian"]

    is_consumer_group {
        consumer_group[_] == principal.name
    }

    is_producer_group {
        producer_group[_] == principal.name
    }

    is_admin_group {
        admin_group[_] == principal.name
    }

    ###############################################################################
    # Operations and their helper rules
    ###############################################################################

    consumer_operations = {
                            "Topic": ["Read", "Describe"], 
                            "Group": ["Read", "Describe"]
                        }

    producer_operations = {
                            "Topic": ["Write", "Describe"]
                        }

    admin_operations = {
                        "Topic": ["Read", "Write", "Create", "Delete", "Alter", "Describe", "ClusterAction", "DescribeConfigs", "AlterConfigs"], 
                        "Group": ["Read", "Delete", "Describe"],
                        "Cluster": ["Create", "Alter", "Describe", "ClusterAction", "DescribeConfigs", "AlterConfigs"]
                        }

    is_consumer_operation {
        consumer_operations[input.resource.resourceType.name][_] == input.operation.name
    }

    is_producer_operation {
        producer_operations[input.resource.resourceType.name][_] == input.operation.name
    }

    is_admin_operation {
        admin_operations[input.resource.resourceType.name][_] == input.operation.name
    }

    ###############################################################################
    # Helper rules for input processing
    ###############################################################################

    principal = {"fqn": parsed.CN, "name": cn_parts[0]} {
        parsed := parse_user(urlquery.decode(input.session.sanitizedUser))
        cn_parts := split(parsed.CN, ".")
    }

    parse_user(user) = {key: value |
        parts := split(user, ",")
        [key, value] := split(parts[_], "=")
    }